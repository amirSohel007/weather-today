{"version":3,"sources":["components/Weather.js","components/Clock.js","components/Title.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Weather","this","props","clickHandler","degreesK","displayUnits","Math","floor","className","city","country","kelvinTemp","onClick","handleClicked","bind","calculateTemp","tempMin","tempMax","humidity","description","pressure","error","icon","src","alt","React","Component","Clock","state","date","Date","newDate","getDate","getMonth","getFullYear","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","getCurrentDate","Title","Form","onSubmit","getWeather","type","name","placeholder","API_KEY","process","App","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","main","temp","temp_min","temp_max","sys","weather","unit","alert","toggleDisplayUnits","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40e082cb.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Weather extends React.Component {\n  handleClicked() {\n    this.props.clickHandler();\n  }\n\n  calculateTemp(degreesK, displayUnits) {\n    if (displayUnits === \"C\") return Math.floor(degreesK - 273);\n    else return Math.floor(((degreesK - 273) * 9) / 5 + 32);\n  }\n\n  render() {\n    return (\n      <div className=\"weather__info\">\n        {this.props.city && this.props.country && (\n          <p className=\"weather__key\">\n            {\" \"}\n            <i className=\"fas fa-location-arrow\"></i> Location:{\" \"}\n            <span className=\"weather__value\">\n              {this.props.city}, {this.props.country}\n            </span>\n          </p>\n        )}\n\n        {this.props.kelvinTemp && (\n          <p className=\"weather__key\">\n            <i className=\"fas fa-thermometer-three-quarters\"></i> Temperature:{\" \"}\n            <span\n              onClick={this.handleClicked.bind(this)}\n              className=\"weather__value\"\n            >\n              {this.calculateTemp(\n                this.props.kelvinTemp,\n                this.props.displayUnits\n              )}\n              &deg;\n              {this.props.displayUnits}\n            </span>\n          </p>\n        )}\n        {this.props.tempMin && this.props.tempMax && (\n          <p className=\"weather__key\">\n            {\" \"}\n            <i className=\"fas fa-sort\"></i> Min/Max:{\" \"}\n            <span\n              onClick={this.handleClicked.bind(this)}\n              className=\"weather__value\"\n            >\n              {this.calculateTemp(this.props.tempMin, this.props.displayUnits)}\n              &deg;{this.props.displayUnits} |\n              {this.calculateTemp(this.props.tempMax, this.props.displayUnits)}\n              &deg;\n              {this.props.displayUnits}\n            </span>\n          </p>\n        )}\n        {this.props.humidity && (\n          <p className=\"weather__key\">\n            {\" \"}\n            <i className=\"fas fa-tint\"></i> Humidity:{\" \"}\n            <span className=\"weather__value\">{this.props.humidity}%</span>\n          </p>\n        )}\n        {this.props.description && (\n          <p className=\"weather__key\">\n            {\" \"}\n            <i className=\"fas fa-bars\"></i> Condition:{\" \"}\n            <span className=\"weather__value\">{this.props.description}</span>\n          </p>\n        )}\n        {this.props.pressure && (\n          <p className=\"weather__key\">\n            {\" \"}\n            <i className=\"fas fa-wind\"></i> Pressure:{\" \"}\n            <span className=\"weather__value\">{this.props.pressure} hPa</span>\n          </p>\n        )}\n\n        {this.props.error && (\n          <p className=\"weather__key\">\n            {\" \"}\n            <i className=\"fas fa-exclamation\"></i>{\" \"}\n            <span className=\"weather__value\">{this.props.error}</span>\n          </p>\n        )}\n        {this.props.icon && (\n          <p>\n            <img\n              src={`http://openweathermap.org/img/w/${this.props.icon}.png`}\n              alt=\"wthr img\"\n            />\n          </p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  getCurrentDate() {\n    let newDate = new Date();\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n\n    return month + \"-\" + date + \"-\" + year;\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Your Local Time and Date</p>\n        <p>\n          {this.state.date.toLocaleTimeString()} || {this.getCurrentDate()}.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from \"react\";\nimport Clock from \"./Clock\";\n\nclass Title extends React.Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <h5 className=\"title-container__clock\">\n          <Clock />\n        </h5>\n        <h1 className=\"title-container__title\">Weather Today</h1>\n        <p className=\"title-container__subtitle\">\n          Get the latest weather conditions\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","import React from \"react\";\n\nconst Form = (props) => {\n  return (\n    <div>\n      <form onSubmit={props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Country\" />\n        <button>Get Weather</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends React.Component {\n  state = {\n    kelvinTemp: undefined,\n    tempMin: undefined,\n    tempMax: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    pressure: undefined,\n    displayUnits: \"F\",\n    error: undefined,\n    icon: undefined,\n  };\n\n  toggleDisplayUnits() {\n    this.state.displayUnits === \"F\"\n      ? this.setState({\n          displayUnits: \"C\",\n        })\n      : this.setState({\n          displayUnits: \"F\",\n        });\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`\n    );\n\n    const data = await api_call.json();\n    try {\n      if (city && country) {\n        this.setState({\n          kelvinTemp: data.main.temp,\n          tempMin: data.main.temp_min,\n          tempMax: data.main.temp_max,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          pressure: data.main.pressure,\n          unit: data.main.temp,\n          error: \"\",\n          icon: data.weather[0].icon,\n        });\n      } else {\n        this.setState({\n          kelvinTemp: undefined,\n          tempMin: undefined,\n          tempMax: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          pressure: undefined,\n          unit: undefined,\n          icon: undefined,\n          error: \"Please Enter Correct Values\",\n        });\n      }\n    } catch (error) {\n      // if (error.response) {\n      //   console.log(error.response.data);\n      //   this.setState({ error: error.response.data.message });\n      // } else {\n      alert(\"Sorry, we don't recognise this input\");\n      //}\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Title />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather} />\n                <Weather\n                  kelvinTemp={this.state.kelvinTemp}\n                  tempMin={this.state.tempMin}\n                  tempMax={this.state.tempMax}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  pressure={this.state.pressure}\n                  displayUnits={this.state.displayUnits}\n                  clickHandler={this.toggleDisplayUnits.bind(this)}\n                  error={this.state.error}\n                  icon={this.state.icon}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}