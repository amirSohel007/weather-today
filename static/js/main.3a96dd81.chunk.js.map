{"version":3,"sources":["components/Weather.js","components/Title.js","components/Form.js","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Weather","this","props","clickHandler","degreesK","displayUnits","Math","floor","className","city","country","icon","src","alt","size","kelvinTemp","onClick","handleClicked","bind","calculateTemp","description","tempMin","tempMax","humidity","pressure","error","React","Component","Title","state","Form","onSubmit","getWeather","type","name","placeholder","Clock","date","Date","newDate","getDate","getMonth","getFullYear","timerID","setInterval","tick","clearInterval","setState","class","toLocaleTimeString","getCurrentDate","API_KEY","process","App","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","main","temp","temp_min","temp_max","sys","weather","unit","alert","toggleDisplayUnits","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a96dd81.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\n\nclass Weather extends React.Component {\n  handleClicked() {\n    this.props.clickHandler();\n  }\n\n  calculateTemp(degreesK, displayUnits) {\n    if (displayUnits === \"C\") return Math.floor(degreesK - 273);\n    else return Math.floor(((degreesK - 273) * 9) / 5 + 32);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"cards pt-4\">\n          <h1>\n            {this.props.city && this.props.country && (\n              <p>\n                {this.props.city}, {this.props.country}\n              </p>\n            )}\n          </h1>\n          {this.props.icon && (\n            <p>\n              <img\n                src={`http://openweathermap.org/img/w/${this.props.icon}.png`}\n                alt=\"wthr img\"\n                size=\"40px\"\n              />\n            </p>\n          )}\n          <h1 className=\"py-2\">\n            {this.props.kelvinTemp && (\n              <p>\n                <i className=\"fas fa-thermometer-three-quarters\"></i>{\" \"}\n                <span onClick={this.handleClicked.bind(this)}>\n                  {this.calculateTemp(\n                    this.props.kelvinTemp,\n                    this.props.displayUnits\n                  )}\n                  &deg;\n                  {this.props.displayUnits}\n                </span>\n              </p>\n            )}\n          </h1><br></br>\n          <h4 className=\"py-6\">\n            {this.props.description && (\n              <p>\n                {\" \"}\n                <i className=\"fas fa-info\"></i>{\" \"}\n                <span>{this.props.description}</span>\n              </p>\n            )}\n          </h4>\n          <h4 className=\"py-3\">\n            {this.props.tempMin && this.props.tempMax && (\n              <p>\n                {\" \"}\n                <i className=\"fas fa-sort\"></i> Min/Max:{\" \"}\n                <span onClick={this.handleClicked.bind(this)}>\n                  {this.calculateTemp(\n                    this.props.tempMin,\n                    this.props.displayUnits\n                  )}\n                  &deg;{this.props.displayUnits} |\n                  {this.calculateTemp(\n                    this.props.tempMax,\n                    this.props.displayUnits\n                  )}\n                  &deg;\n                  {this.props.displayUnits}\n                </span>\n              </p>\n            )}\n          </h4>\n          <h4 className=\"py-4\">\n            {this.props.humidity && (\n              <p>\n                {\" \"}\n                <i className=\"fas fa-water\"></i> Humidity:{\" \"}\n                <span>{this.props.humidity}%</span>\n              </p>\n            )}\n          </h4>\n          <h4 className=\"py-5\">\n            {this.props.pressure && (\n              <p>\n                {\" \"}\n                <i className=\"fas fa-tachometer-alt\"></i> Pressure:{\" \"}\n                <span>{this.props.pressure} hPa</span>\n              </p>\n            )}\n          </h4>\n          <h4>\n            {this.props.error && (\n              <p>\n                {\" \"}\n                <i></i> <span>{this.props.error}</span>\n              </p>\n            )}\n          </h4>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport \"../App.css\";\n\nclass Title extends React.Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Weather Today</h1>\n        <p>Get the latest weather conditions</p>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"../form.css\";\n\nconst Form = (props) => {\n  return (\n    <div className=\"container\">\n      <form onSubmit={props.getWeather}>\n        <div className=\"row\">\n          <div className=\"col-md-3 offset-md-2\">\n            <input\n              type=\"text\"\n              name=\"city\"\n              className=\"form-control\"\n              placeholder=\"City\"\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <input\n              type=\"text\"\n              name=\"country\"\n              className=\"form-control\"\n              placeholder=\"Country\"\n            />\n          </div>\n          <div className=\"col-md-3 mt-md-0 mt-2 text-md-left\">\n            <button className=\"btn btn-default\">Get Weather</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport \"../App.css\";\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n\n  getCurrentDate() {\n    let newDate = new Date();\n    let date = newDate.getDate();\n    let month = newDate.getMonth() + 1;\n    let year = newDate.getFullYear();\n\n    return month + \"-\" + date + \"-\" + year;\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date(),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <p>Your Local Time and Date</p>\n        <i class=\"far fa-clock\"></i>{\" \"}\n        {this.state.date.toLocaleTimeString()}<br></br>\n        <i class=\"far fa-calendar-alt\"></i>{\" \"}\n        {this.getCurrentDate()}.\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Clock from \"./components/Clock\";\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends React.Component {\n  state = {\n    kelvinTemp: undefined,\n    tempMin: undefined,\n    tempMax: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    pressure: undefined,\n    displayUnits: \"F\",\n    error: false,\n    icon: undefined,\n  };\n\n  toggleDisplayUnits() {\n    this.state.displayUnits === \"F\"\n      ? this.setState({\n          displayUnits: \"C\",\n        })\n      : this.setState({\n          displayUnits: \"F\",\n        });\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`\n    );\n\n    const data = await api_call.json();\n    try {\n      if (city && country) {\n        this.setState({\n          kelvinTemp: data.main.temp,\n          tempMin: data.main.temp_min,\n          tempMax: data.main.temp_max,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          pressure: data.main.pressure,\n          unit: data.main.temp,\n          error: false,\n          icon: data.weather[0].icon,\n        });\n      } else {\n        this.setState({\n          kelvinTemp: undefined,\n          tempMin: undefined,\n          tempMax: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          pressure: undefined,\n          unit: undefined,\n          icon: undefined,\n          error: \"Please Enter Correct Values\",\n        });\n      }\n    } catch (error) {\n      alert(\"Sorry, try again!\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Title />\n        <Clock />\n\n        <Form getWeather={this.getWeather} />\n        <Weather\n          kelvinTemp={this.state.kelvinTemp}\n          tempMin={this.state.tempMin}\n          tempMax={this.state.tempMax}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          pressure={this.state.pressure}\n          displayUnits={this.state.displayUnits}\n          clickHandler={this.toggleDisplayUnits.bind(this)}\n          error={this.state.error}\n          icon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}